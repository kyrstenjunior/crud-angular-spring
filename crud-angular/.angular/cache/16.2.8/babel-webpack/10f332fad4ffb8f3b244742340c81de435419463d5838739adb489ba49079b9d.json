{"ast":null,"code":"import { first, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CoursesService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.API = '/assets/acourses.json';\n  }\n  list() {\n    // Pipe + tap: manipula os dados como o subscribe do modo http manual convencional\n    return this.httpClient.get(this.API).pipe(first(),\n    // retorna apenas a primeira resposta do servidor, pois não necessário mais de um envio para recuperar as informações\n    // take(1), // funciona da mesma forma que o first()\n    tap(courses => console.log(courses)));\n  }\n  static #_ = this.ɵfac = function CoursesService_Factory(t) {\n    return new (t || CoursesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CoursesService,\n    factory: CoursesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["first","tap","CoursesService","constructor","httpClient","API","list","get","pipe","courses","console","log","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\kyrst\\OneDrive\\Área de Trabalho\\Repositórios Locais\\crud-angular-spring\\crud-angular\\src\\app\\courses\\services\\courses.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Course } from '../model/course';\r\nimport { delay, first, take, tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CoursesService {\r\n\r\n  private readonly API = '/assets/acourses.json';\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  list() {\r\n    // Pipe + tap: manipula os dados como o subscribe do modo http manual convencional\r\n    return this.httpClient.get<Course[]>(this.API)\r\n    .pipe(\r\n      first(), // retorna apenas a primeira resposta do servidor, pois não necessário mais de um envio para recuperar as informações\r\n      // take(1), // funciona da mesma forma que o first()\r\n      tap(courses => console.log(courses))\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAIA,SAAgBA,KAAK,EAAQC,GAAG,QAAQ,MAAM;;;AAK9C,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFb,KAAAC,GAAG,GAAG,uBAAuB;EAEA;EAE9CC,IAAIA,CAAA;IACF;IACA,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAW,IAAI,CAACF,GAAG,CAAC,CAC7CG,IAAI,CACHR,KAAK,EAAE;IAAE;IACT;IACAC,GAAG,CAACQ,OAAO,IAAIC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC,CAAC,CACrC;EACH;EAAC,QAAAG,CAAA,G;qBAdUV,cAAc,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdf,cAAc;IAAAgB,OAAA,EAAdhB,cAAc,CAAAiB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}